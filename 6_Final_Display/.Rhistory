data$date_ech <- as.Date(data$date_ech, "%Y-%m-%d")
require("jsonlite")
require("httr")
url = "http://127.0.0.1:5000/"
command = "allpredictions"
request = paste(url, command, sep="")
prediction <- GET(request)
library(ggplot2)
data=read.csv("https://opendata.lillemetropole.fr/explore/dataset/indice-qualite-de-lair/download/?format=csv&timezone=Europe/Berlin&use_labels_for_header=true", head=TRUE, sep=";")
keeps = c("date_ech", "valeur")
data = data[keeps]
data$date_ech <- as.Date(data$date_ech, "%Y-%m-%d")
require("jsonlite")
require("httr")
url = "http://127.0.0.1:5000/"
command = "allpredictions"
request = paste(url, command, sep="")
prediction <- GET(request)
prediction <- fromJSON(content(prediction, "text"))
prediction <- lapply(prediction, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
df_prediction<-as.data.frame(do.call("cbind", prediction))
df_prediction$value = as.numeric(as.character(df_prediction$value))
df_prediction$dateofprediction = as.Date(df_prediction$dateofprediction, format = "%Y-%m-%d")
head(df_prediction)
listOfdf = split(df_prediction, df_prediction$typeofprediction)
head(listOfdf)
JplusUn = listOfdf[[1]]
JplusDeux = listOfdf[[2]]
JplusTrois = listOfdf[[3]]
library(ggplot2)
ggplot(data=JplusUn, aes(x=dateofprediction, y=value)) +
geom_line(col=rgb(0.1,0.7,0.1,0.8)) +
geom_point(shape=21, color="black", fill=rgb(0.1,0.7,0.1,0.8), size=6) +
ggtitle("Prediction J+1")
data=read.csv("C:\Users\avere\Documents\Cours\Projet PPAL\AirIQ2\0_ResearchWork\3_CreateAndCleanDatasets\HistoricDataset\PollDownload\ArchivePollMEL.csv", head=TRUE, sep=";")
data=read.csv("C:\Users\avere\Documents\Cours\Projet PPAL\AirIQ2\0_ResearchWork\3_CreateAndCleanDatasets\HistoricDataset\PollDownload\ArchivePollMEL.csv", head=TRUE, sep=";")
data=read.csv("C:\\Users\\avere\\Documents\\Cours\\Projet PPAL\\AirIQ2\\0_ResearchWork\\3_CreateAndCleanDatasets\\HistoricDataset\\PollDownload\\ArchivePollMEL.csv", head=TRUE, sep=";")
write.csv(data, file = "C:\\Users\\avere\\Documents\\Cours\\Projet PPAL\\AirIQ2\\0_ResearchWork\\3_CreateAndCleanDatasets\\HistoricDataset\\PollDownload\\ArchivePollMEL2.csv")
shiny::runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
library(ggplot2)
library(ggthemes)
count = 0
for(JPlusX in listOfdf){
count=count+1
p = ggplot(data=JPlusX, aes(x=date)) +
ylim(0,10)+
geom_line(aes(y=predictValue),
color = "darkred",
linetype="twodash") +
geom_point(aes(y=predictValue),
shape=21, color="black",
fill="darkred",
size=4)+
geom_line(aes(y = valeur),
color=rgb(0.1,0.7,0.1,0.8))  +
geom_point(aes(y=valeur),
shape=21, color="black",
fill=rgb(0.1,0.7,0.1,0.8),
size=4)+
ggtitle(sprintf("Prediction J+%s",count))+
theme_hc()
print(p)
}
library(ggplot2)
data=read.csv("https://opendata.lillemetropole.fr/explore/dataset/indice-qualite-de-lair/download/?format=csv&timezone=Europe/Berlin&use_labels_for_header=true", head=TRUE, sep=";")
keeps = c("date_ech", "valeur")
data = data[keeps]
names(data)[names(data)=="date_ech"] <- "date"
data$date <- as.Date(data$date, "%Y-%m-%d")
head(data)
require("jsonlite")
require("httr")
url = "http://127.0.0.1:5000/"
command = "allpredictions"
request = paste(url, command, sep="")
prediction <- GET(request)
library(shiny)
library(ggplot2)
library(gridExtra)
library(rjson)
library(ggthemes)
library(dplyr)
require("jsonlite")
require("httr")
#Import datas from lille
data=read.csv("https://opendata.lillemetropole.fr/explore/dataset/indice-qualite-de-lair/download/?format=csv&timezone=Europe/Berlin&use_labels_for_header=true", head=TRUE, sep=";")
keeps = c("date_ech", "valeur")
data = data[keeps]
names(data)[names(data)=="date_ech"] <- "date"
data$date <- as.Date(data$date, "%Y-%m-%d")
#Import datas from our API
url = "https://airiq-271312.appspot.com//"
command = "allpredictions"
request = paste(url, command, sep="")
prediction <- GET(request)
prediction <- fromJSON(content(prediction, "text"))
prediction <- lapply(prediction, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
df_prediction<-as.data.frame(do.call("cbind", prediction))
df_prediction$value = as.numeric(as.character(df_prediction$value))
df_prediction$dateofprediction = as.Date(df_prediction$dateofprediction, format = "%Y-%m-%d")
names(df_prediction)[names(df_prediction)=="dateofprediction"] <- "date"
names(df_prediction)[names(df_prediction)=="value"] <- "predictValue"
# mix both data:
concat_df = left_join(df_prediction, data, by="date")
listOfdf = split(concat_df, concat_df$typeofprediction)
View(concat_df)
View(df_prediction)
View(df_prediction)
View(prediction)
View(prediction)
library(shiny)
library(ggplot2)
library(gridExtra)
library(rjson)
library(ggthemes)
library(dplyr)
require("jsonlite")
require("httr")
#Import datas from lille
data=read.csv("https://opendata.lillemetropole.fr/explore/dataset/indice-qualite-de-lair/download/?format=csv&timezone=Europe/Berlin&use_labels_for_header=true", head=TRUE, sep=";")
keeps = c("date_ech", "valeur")
data = data[keeps]
names(data)[names(data)=="date_ech"] <- "date"
data$date <- as.Date(data$date, "%Y-%m-%d")
#Import datas from our API
url = "https://airiq-271312.appspot.com//"
command = "allpredictions"
request = paste(url, command, sep="")
prediction <- GET(request)
prediction <- fromJSON(content(prediction, "text"))
prediction <- lapply(prediction, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
df_prediction<-as.data.frame(do.call("cbind", prediction))
df_prediction$value = as.numeric(as.character(df_prediction$value))
df_prediction$dateofprediction = as.Date(df_prediction$dateofprediction, format = "%Y-%m-%d")
names(df_prediction)[names(df_prediction)=="dateofprediction"] <- "date"
names(df_prediction)[names(df_prediction)=="value"] <- "predictValue"
# mix both data:
concat_df = left_join(df_prediction, data, by="date")
listOfdf = split(concat_df, concat_df$typeofprediction)
prediction
df_prediction
listOfdf
lapply(listOfdf[[0]]["date"], as.Date, format="%m/%d/%y")
a = listOfdf[[0]]
listOfdf[[0]]
listOfdf[0]
listOfdf
listOfdf[0]
listOfdf[[0]]
a = listOfdf[[1]]
lapply(a, as.Date, format="%m/%d/%y")
a = listOfdf[[1]]
lapply(a["date"], as.Date, format="%m/%d/%y")
dat= listOfdf[[1]]
dat$max = lapply(a["date"], as.Date, format="%m/%d/%y")
dat$max
dat$max = do.call(pmax, a["date"])
dat$max = do.call(pmax, listOfdf[[1]]["date"])
dat$max
dat$max = do.call(pmax, lapply(listOfdf[[1]]["date"], as.Date, format="%m/%d/%y"))
dat$max
a = listOfdf[[1]]
a = listOfdf[[1]]
a = sort(a, decreasing=True)
a = listOfdf[[1]]
a = sort(a, decreasing=true)
a = listOfdf[[1]]
a = sort(a, decreasing= TRUE)
a = listOfdf[[1]]
a = sort(a["date"], decreasing= TRUE)
a = listOfdf[[1]]
a = order(a)
a = listOfdf[[1]]
a = order(a["date"])
a = listOfdf[[1]]
a = order(a["date"])
a
a = listOfdf[[1]]
a = a[order(a["date"])]
a = listOfdf[[1]]
a = a[order(a["date"])]
a
for (i in 1:3):
for (i in 1:3){
tmp = listOfdf[[1]]
tmp = tmp[order(tmp["date"])]
}
for (i in 1:3){
tmp = listOfdf[[i]]
tmp = tmp[order(tmp["date"])]
tmp[1]
}
for (i in 1:3){
tmp = listOfdf[[i]]
tmp = tmp[order(tmp["date"])]
print([1])
for (i in 1:3){
tmp = listOfdf[[i]]
tmp = tmp[order(tmp["date"])]
print(tmp[1])
}
for (i in 1:3){
tmp = listOfdf[[i]]
tmp = tmp[order(tmp["date"])]
print(tmp[,1])
}
for (i in 1:3){
tmp = listOfdf[[i]]
tmp = tmp[order(tmp["date"])]
print(tmp[1,])
}
listOfdf
for (i in 1:3){
tmp = listOfdf[[i]]
tmp = tmp[order(tmp["date"])]
print(tmp)
}
tmp = listOfdf[[1]]
max(tmp$date, na.rm = TRUE)
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
listOfdf[[1]][tmp$date = m]
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
listOfdf[[1]][tmp$date == m]
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
l = listOfdf[[1]][tmp$date == m]
print(l)
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
l = listOfdf[[1]][listOfdf$date == m]
print(l)
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
l = listOfdf[[1]][listOfdf$date == m]
print(m)
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
l = listOfdf[[1]][m]
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
l = listOfdf[[1]]["date" == m]
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
l = listOfdf[[1]]["date" == m]
m
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
l = listOfdf[[1]][listOfdf[[1]]$date == m]
print(l)
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m]
print(l)
tmp$date
tmp = listOfdf[[1]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
print(l)
predictionForToday = list()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
print(l)
}
predictionForToday = list()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday.append(l)
}
predictionForToday = list()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday[i] = l
}
predictionForToday = list()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
predictionForToday[i] = tmp[tmp$date == m,]
}
predictionForToday = list()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
predictionForToday[i] = tmp[tmp$date == m,]
}
predictionForToday
predictionForToday
predictionForToday = list()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday[i] = l
}
predictionForToday
predictionForToday
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday[i] = l
}
predictionForToday <- as.data.frame(do.call("cbind", predictionForToday))
predictionForToday
predictionForToday
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday[i] = l
}
predictionForToday <- as.data.frame(c(predictionForToday[1]))
predictionForToday = as.data.frame()
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
}
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
}
predictionForToday
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = join(predictionForToday, l)
}
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = merge(predictionForToday, l)
}
predictionForToday
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = concat_df(predictionForToday, l)
}
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = left_join(predictionForToday, l)
}
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = left_join(predictionForToday, l, by='date')
}
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = right_join(predictionForToday, l, by='date')
}
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = c(predictionForToday,l)
}
predictionForToday
predictionForToday = as.data.frame(do.call("cbind", prediction))
predictionForToday
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = c(predictionForToday,l)
}
predictionForToday = as.data.frame(do.call("cbind", prediction))
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = c(predictionForToday,l)
}
predictionForToday = as.data.frame(do.call("cbind", predictionForToday))
predictionForToday
predictionForToday = as.data.frame(predictionForToday)
predictionForToday
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = c(predictionForToday,l)
}
predictionForToday = as.data.frame(predictionForToday)
predictionForToday
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = rbind(predictionForToday,l)
}
predictionForToday = as.data.frame(predictionForToday)
predictionForToday
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = rbind(predictionForToday,l)
}
predictionForToday
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = rbind(predictionForToday,l)
}
predictionForToday = predictionForToday[c("date","predictValue")]
predictionForToday
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = rbind(predictionForToday,l)
}
#predictionForToday = predictionForToday[c("date","predictValue")]
predictionForToday
predictionForToday = data.frame()
for (i in 1:3){
tmp = listOfdf[[i]]
m = max(tmp$date, na.rm = TRUE)
l = tmp[tmp$date == m,]
predictionForToday = rbind(predictionForToday,l)
}
predictionForToday = predictionForToday[c("date","typeofprediction","predictValue")]
predictionForToday
library(shiny)
runApp("App-7",display.mode = "showcase")
library(shiny)
runApp("App-9", display.mode = "showcase")
library(shiny)
runApp("App-11", display.mode = "showcase")
predictionForToday.reindex("typeofprediction")
predictionForToday
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
install.packages("shinydashboard")
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp()
runApp()
runApp()
runApp()
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
install.packages("DT")
runApp('~/Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
predictionForToday
predictionForToday
predictionForToday.index() = predictionForToday["date"]
predictionForToday.index
predictionForToday.set_index("date")
predictionForToday
rownames(predictionForToday) = predictionForToday["date"]
rownames(predictionForToday)  <- NULL
predictionForToday
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
runApp('Cours/Projet PPAL/AirIQ2/6_Final_Display')
